import is from 'is';
import path from 'path';
import ProtractorJasmine2HtmlReporter from 'protractor-jasmine2-html-reporter';
import uuid from 'uuid/v4';
import { removeAsync } from 'fs-extra-promise';
import { consolidate } from 'consolidator';
import { entries } from 'walk-sync';

var capability = {
  get() {
    return browser.getCapabilities()
  }
};

var savePath = undefined;

function unsetSavePath() {
  savePath = undefined;
}

var reporterBuilder = {
  build() {
    var reporter = new ProtractorJasmine2HtmlReporter({
      fileName: uuid(),
      savePath: savePath,
      cleanDestination: false,
      consolidateAll: false,
      takeScreenshots: false
    });
    unsetSavePath();
    return reporter
  },
  setSavePath(value) {
    savePath = value;
    return this
  }
};

const TEMPORARY_DIRECTORY = 'protractor-jasmine2-parallel-html-reports-tmp/';

var temporaryDirectory = {
  get() {
    return TEMPORARY_DIRECTORY
  },
  remove() {
    return removeAsync(TEMPORARY_DIRECTORY)
  }
};

var capabilityTransformer = {
  toReporter(capability) {
    return reporterBuilder
      .setSavePath(
        path.join(
          temporaryDirectory.get(),
          capability.get('platform'),
          capability.get('browserName'),
          capability.get('version')
        )
      )
      .build()
  }
};

var jasmineReporters = {
  add(reporter) {
    jasmine.getEnv().addReporter(reporter);
  }
};

var reportConsolidator = {
  consolidate(report) {
    return consolidate(report.sources, report.destination)
  }
};

var reportsConsolidator = {
  consolidate(reports) {
    return Promise.all(reports.map(reportConsolidator.consolidate))
  }
};

const reportsDirectory = new WeakMap();

var reportsDirectory$1 = {
  get() {
    return reportsDirectory.get(this)
  },
  set(directory) {
    reportsDirectory.set(this, directory);
  }
};

var entries$1 = {
  getAll(path$$1) {
    return Promise.resolve(entries(path$$1))
  }
};

var isDirectory = entry => entry.isDirectory();

var isSubdirectoryCount = number => entry =>
  entry.relativePath.split('/').length === number + 1;

function isReportDirectory(entries$$1) {
  return entries$$1.filter(isDirectory).filter(isSubdirectoryCount(3))
}

var temporaryReportDirectories = {
  getAll() {
    return entries$1
      .getAll(temporaryDirectory.get())
      .then(isReportDirectory)
  }
};

class Report {
  constructor() {
    this.destination = '';
    this.sources = '';
  }
  setDestination(destination) {
    this.destination = destination;
  }
  setSources(sources) {
    this.sources = sources;
  }
}

const REPORT_EXTENSION = '.html';
const SOURCES_PATTERN = '*' + REPORT_EXTENSION;

var relativePathTransformer = {
  toReportDestination(relativePath) {
    return path.join(reportsDirectory$1.get(), toReportName(relativePath))
  },
  toReportSources(relativePath) {
    return path.join(temporaryDirectory.get(), relativePath, SOURCES_PATTERN)
  }
};

function toReportName(relativePath) {
  return (
    relativePath.split('/').filter(Boolean).join('-').toLowerCase() +
    REPORT_EXTENSION
  )
}

var temporaryReportDirectoryTransformer = {
  toReport(temporaryReportDirectory) {
    let report = new Report();
    report.setDestination(
      relativePathTransformer.toReportDestination(
        temporaryReportDirectory.relativePath
      )
    );
    report.setSources(
      relativePathTransformer.toReportSources(
        temporaryReportDirectory.relativePath
      )
    );
    return report
  }
};

var temporaryReportDirectoriesTransformer = {
  toReports(temporaryReportDirectories) {
    return Promise.all(
      temporaryReportDirectories.map(
        temporaryReportDirectoryTransformer.toReport
      )
    )
  }
};

const DEFAULT_REPORTS_DIRECTORY = './reports';

class ProtractorJasmine2ParallelHtmlReporter {
  constructor(reportsDirectory = DEFAULT_REPORTS_DIRECTORY) {
    this.reportsDirectory = reportsDirectory;
  }
  add() {
    return capability
      .get()
      .then(capabilityTransformer.toReporter)
      .then(jasmineReporters.add)
  }
  consolidateReports() {
    return temporaryReportDirectories
      .getAll()
      .then(temporaryReportDirectoriesTransformer.toReports)
      .then(reportsConsolidator.consolidate)
      .then(temporaryDirectory.remove())
  }
  set reportsDirectory(dir) {
    if (!is.string(dir)) {
      throw new TypeError('reports directory should be a string')
    }
    if (is.empty(dir.trim())) {
      throw new TypeError('reports directory should be a non-empty string')
    }
    reportsDirectory$1.set(dir);
  }
}

export default ProtractorJasmine2ParallelHtmlReporter;
