'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var is = _interopDefault(require('is'));
var path = _interopDefault(require('path'));
var ProtractorJasmine2HtmlReporter = _interopDefault(require('protractor-jasmine2-html-reporter'));
var uuid = _interopDefault(require('uuid/v4'));
var fsExtraPromise = require('fs-extra-promise');
var consolidator = require('consolidator');
var walkSync = require('walk-sync');

var capability = {
  get() {
    return browser.getCapabilities();
  }
};

var savePath = undefined;

function unsetSavePath() {
  savePath = undefined;
}

var reporterBuilder = {
  build() {
    var reporter = new ProtractorJasmine2HtmlReporter({
      fileName: uuid(),
      savePath: savePath,
      cleanDestination: false,
      consolidateAll: false,
      takeScreenshots: false
    });
    unsetSavePath();
    return reporter;
  },
  setSavePath(value) {
    savePath = value;
    return this;
  }
};

var TEMPORARY_DIRECTORY = 'protractor-jasmine2-parallel-html-reports-tmp/';

var temporaryDirectory = {
  get() {
    return TEMPORARY_DIRECTORY;
  },
  remove() {
    return fsExtraPromise.removeAsync(TEMPORARY_DIRECTORY);
  }
};

var capabilityTransformer = {
  toReporter(capability) {
    return reporterBuilder.setSavePath(path.join(temporaryDirectory.get(), capability.get('platform'), capability.get('browserName'), capability.get('version'))).build();
  }
};

var jasmineReporters = {
  add(reporter) {
    jasmine.getEnv().addReporter(reporter);
  }
};

var reportConsolidator = {
  consolidate(report) {
    return consolidator.consolidate(report.sources, report.destination);
  }
};

var reportsConsolidator = {
  consolidate(reports) {
    return Promise.all(reports.map(reportConsolidator.consolidate));
  }
};

var reportsDirectory = new WeakMap();

var reportsDirectory$1 = {
  get() {
    return reportsDirectory.get(this);
  },
  set(directory) {
    reportsDirectory.set(this, directory);
  }
};

var entries$1 = {
  getAll(path$$1) {
    return Promise.resolve(walkSync.entries(path$$1));
  }
};

var isDirectory = (function (entry) {
  return entry.isDirectory();
});

var isSubdirectoryCount = (function (number) {
  return function (entry) {
    return entry.relativePath.split('/').length === number + 1;
  };
});

function isReportDirectory(entries$$1) {
  return entries$$1.filter(isDirectory).filter(isSubdirectoryCount(3));
}

var temporaryReportDirectories = {
  getAll() {
    return entries$1.getAll(temporaryDirectory.get()).then(isReportDirectory);
  }
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var Report = function () {
  function Report() {
    classCallCheck(this, Report);

    this.destination = '';
    this.sources = '';
  }

  createClass(Report, [{
    key: 'setDestination',
    value: function setDestination(destination) {
      this.destination = destination;
    }
  }, {
    key: 'setSources',
    value: function setSources(sources) {
      this.sources = sources;
    }
  }]);
  return Report;
}();

var REPORT_EXTENSION = '.html';
var SOURCES_PATTERN = '*' + REPORT_EXTENSION;

var relativePathTransformer = {
  toReportDestination(relativePath) {
    return path.join(reportsDirectory$1.get(), toReportName(relativePath));
  },
  toReportSources(relativePath) {
    return path.join(temporaryDirectory.get(), relativePath, SOURCES_PATTERN);
  }
};

function toReportName(relativePath) {
  return relativePath.split('/').filter(Boolean).join('-').toLowerCase() + REPORT_EXTENSION;
}

var temporaryReportDirectoryTransformer = {
  toReport(temporaryReportDirectory) {
    var report = new Report();
    report.setDestination(relativePathTransformer.toReportDestination(temporaryReportDirectory.relativePath));
    report.setSources(relativePathTransformer.toReportSources(temporaryReportDirectory.relativePath));
    return report;
  }
};

var temporaryReportDirectoriesTransformer = {
  toReports(temporaryReportDirectories) {
    return Promise.all(temporaryReportDirectories.map(temporaryReportDirectoryTransformer.toReport));
  }
};

var DEFAULT_REPORTS_DIRECTORY = './reports';

var ProtractorJasmine2ParallelHtmlReporter = function () {
  function ProtractorJasmine2ParallelHtmlReporter() {
    var reportsDirectory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_REPORTS_DIRECTORY;
    classCallCheck(this, ProtractorJasmine2ParallelHtmlReporter);

    this.reportsDirectory = reportsDirectory;
  }

  createClass(ProtractorJasmine2ParallelHtmlReporter, [{
    key: 'add',
    value: function add() {
      return capability.get().then(capabilityTransformer.toReporter).then(jasmineReporters.add);
    }
  }, {
    key: 'consolidateReports',
    value: function consolidateReports() {
      return temporaryReportDirectories.getAll().then(temporaryReportDirectoriesTransformer.toReports).then(reportsConsolidator.consolidate).then(temporaryDirectory.remove());
    }
  }, {
    key: 'reportsDirectory',
    set: function set$$1(dir) {
      if (!is.string(dir)) {
        throw new TypeError('reports directory should be a string');
      }
      if (is.empty(dir.trim())) {
        throw new TypeError('reports directory should be a non-empty string');
      }
      reportsDirectory$1.set(dir);
    }
  }]);
  return ProtractorJasmine2ParallelHtmlReporter;
}();

module.exports = ProtractorJasmine2ParallelHtmlReporter;
